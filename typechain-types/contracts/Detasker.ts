/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Detasker {
  export type RatingStruct = {
    id: PromiseOrValue<BigNumberish>;
    rating: PromiseOrValue<BigNumberish>;
    review: PromiseOrValue<string>;
    jobId: PromiseOrValue<BigNumberish>;
  };

  export type RatingStructOutput = [BigNumber, number, string, BigNumber] & {
    id: BigNumber;
    rating: number;
    review: string;
    jobId: BigNumber;
  };

  export type FreelanceStruct = {
    id: PromiseOrValue<BigNumberish>;
    isFreelancer: PromiseOrValue<boolean>;
    active: PromiseOrValue<boolean>;
    mainSkills: PromiseOrValue<string>;
    skillsId: PromiseOrValue<BigNumberish>[];
  };

  export type FreelanceStructOutput = [
    BigNumber,
    boolean,
    boolean,
    string,
    BigNumber[]
  ] & {
    id: BigNumber;
    isFreelancer: boolean;
    active: boolean;
    mainSkills: string;
    skillsId: BigNumber[];
  };

  export type JobStruct = {
    hasFunds: PromiseOrValue<boolean>;
    id: PromiseOrValue<BigNumberish>;
    profileId: PromiseOrValue<BigNumberish>;
    title: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    img: PromiseOrValue<string>[];
    owner: PromiseOrValue<string>;
    requester: PromiseOrValue<string>;
    postedDate: PromiseOrValue<BigNumberish>;
    date: PromiseOrValue<BigNumberish>;
    datePaid: PromiseOrValue<BigNumberish>;
    documents: PromiseOrValue<string>;
    requestedPaymentAmount: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    tags: PromiseOrValue<BigNumberish>[];
    publish: PromiseOrValue<boolean>;
    completed: PromiseOrValue<boolean>;
    paid: PromiseOrValue<boolean>;
    assigned: PromiseOrValue<boolean>;
    dateCompleted: PromiseOrValue<BigNumberish>;
    datePublished: PromiseOrValue<BigNumberish>;
    dispute: PromiseOrValue<BigNumberish>[];
    deleted: PromiseOrValue<boolean>;
  };

  export type JobStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    string,
    string,
    string[],
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber[],
    boolean,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber[],
    boolean
  ] & {
    hasFunds: boolean;
    id: BigNumber;
    profileId: BigNumber;
    title: string;
    description: string;
    img: string[];
    owner: string;
    requester: string;
    postedDate: BigNumber;
    date: BigNumber;
    datePaid: BigNumber;
    documents: string;
    requestedPaymentAmount: BigNumber;
    token: string;
    tags: BigNumber[];
    publish: boolean;
    completed: boolean;
    paid: boolean;
    assigned: boolean;
    dateCompleted: BigNumber;
    datePublished: BigNumber;
    dispute: BigNumber[];
    deleted: boolean;
  };

  export type SkillStruct = {
    id: PromiseOrValue<BigNumberish>;
    profileId: PromiseOrValue<BigNumberish>;
    skill: PromiseOrValue<string>;
    url: PromiseOrValue<string>;
    user: PromiseOrValue<string>;
  };

  export type SkillStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string
  ] & {
    id: BigNumber;
    profileId: BigNumber;
    skill: string;
    skillName: string;
    url: string;
    user: string;
  };

  export type SocialStruct = {
    name: PromiseOrValue<string>;
    url: PromiseOrValue<string>;
  };

  export type SocialStructOutput = [string, string] & {
    name: string;
    url: string;
  };

  export type ShowcaseWorkStruct = {
    id: PromiseOrValue<BigNumberish>;
    description: PromiseOrValue<string>;
    url: PromiseOrValue<string>;
  };

  export type ShowcaseWorkStructOutput = [BigNumber, string, string] & {
    id: BigNumber;
    description: string;
    url: string;
  };

  export type NewProfileStruct = {
    name: PromiseOrValue<string>;
    email: PromiseOrValue<string>;
    freelance: Detasker.FreelanceStruct;
    image: PromiseOrValue<string>;
    socials: Detasker.SocialStruct[];
    showcaseWork: Detasker.ShowcaseWorkStruct[];
    skills: Detasker.SkillStruct[];
  };

  export type NewProfileStructOutput = [
    string,
    string,
    Detasker.FreelanceStructOutput,
    string,
    Detasker.SocialStructOutput[],
    Detasker.ShowcaseWorkStructOutput[],
    Detasker.SkillStructOutput[]
  ] & {
    name: string;
    email: string;
    freelance: Detasker.FreelanceStructOutput;
    image: string;
    socials: Detasker.SocialStructOutput[];
    showcaseWork: Detasker.ShowcaseWorkStructOutput[];
    skills: Detasker.SkillStructOutput[];
  };
}

export interface DetaskerInterface extends utils.Interface {
  functions: {
    "Jobdeposit(address,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveTokenSpend(address,address,uint256)": FunctionFragment;
    "assignJob(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "completeJob(address,(uint256,uint8,string,uint256),uint256)": FunctionFragment;
    "createFreelance(address,(uint256,bool,bool,string,uint256[]))": FunctionFragment;
    "createJob(address,(bool,uint256,uint256,string,string,string[],address,address,uint256,uint256,uint256,string,uint256,address,uint256[],bool,bool,bool,bool,uint256,uint256,uint256[],bool))": FunctionFragment;
    "createSkill(address,(uint256,uint256,string,string,address))": FunctionFragment;
    "createSocial(address,(string,string))": FunctionFragment;
    "createUser(address,(string,string,(uint256,bool,bool,string,uint256[]),string,(string,string)[],(uint256,string,string)[],(uint256,uint256,string,string,address)[]))": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getConformationDays(uint256)": FunctionFragment;
    "getJobById(uint256)": FunctionFragment;
    "getJobById(uint256,address)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getUserCount()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "jobWithdraw(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerWithdraw(address,uint256)": FunctionFragment;
    "payForJobByOwner(uint256)": FunctionFragment;
    "recievePaymentForJobByRequester(uint256)": FunctionFragment;
    "setJobDoneByOwner(address,uint256)": FunctionFragment;
    "setJobDoneByRequester(address,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "timeForConformation()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "users(address)": FunctionFragment;
    "vars()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Jobdeposit"
      | "allowance"
      | "approve"
      | "approveTokenSpend"
      | "assignJob"
      | "balanceOf(address)"
      | "balanceOf(address,address)"
      | "completeJob"
      | "createFreelance"
      | "createJob"
      | "createSkill"
      | "createSocial"
      | "createUser"
      | "decimals"
      | "decreaseAllowance"
      | "getConformationDays"
      | "getJobById(uint256)"
      | "getJobById(uint256,address)"
      | "getOwner"
      | "getUserCount"
      | "increaseAllowance"
      | "jobWithdraw"
      | "name"
      | "ownerWithdraw"
      | "payForJobByOwner"
      | "recievePaymentForJobByRequester"
      | "setJobDoneByOwner"
      | "setJobDoneByRequester"
      | "symbol"
      | "timeForConformation"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "users"
      | "vars"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Jobdeposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTokenSpend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assignJob",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeJob",
    values: [
      PromiseOrValue<string>,
      Detasker.RatingStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createFreelance",
    values: [PromiseOrValue<string>, Detasker.FreelanceStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createJob",
    values: [PromiseOrValue<string>, Detasker.JobStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSkill",
    values: [PromiseOrValue<string>, Detasker.SkillStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSocial",
    values: [PromiseOrValue<string>, Detasker.SocialStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createUser",
    values: [PromiseOrValue<string>, Detasker.NewProfileStruct]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConformationDays",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobById(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobById(uint256,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "jobWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "payForJobByOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recievePaymentForJobByRequester",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setJobDoneByOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setJobDoneByRequester",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeForConformation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vars", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Jobdeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveTokenSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFreelance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSkill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSocial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConformationDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobById(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJobById(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jobWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForJobByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recievePaymentForJobByRequester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJobDoneByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setJobDoneByRequester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeForConformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vars", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CompletingJob(address,address,uint256,bool)": EventFragment;
    "PaidForAJob(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompletingJob"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidForAJob"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CompletingJobEventObject {
  whoItFor: string;
  whoCompletedIt: string;
  forAmount: BigNumber;
  waitForConformation: boolean;
}
export type CompletingJobEvent = TypedEvent<
  [string, string, BigNumber, boolean],
  CompletingJobEventObject
>;

export type CompletingJobEventFilter = TypedEventFilter<CompletingJobEvent>;

export interface PaidForAJobEventObject {
  amount: BigNumber;
  timestamp: BigNumber;
}
export type PaidForAJobEvent = TypedEvent<
  [BigNumber, BigNumber],
  PaidForAJobEventObject
>;

export type PaidForAJobEventFilter = TypedEventFilter<PaidForAJobEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Detasker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DetaskerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Jobdeposit(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      _address: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveTokenSpend(
      _token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assignJob(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,address)"(
      _address: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    completeJob(
      _address: PromiseOrValue<string>,
      _rating: Detasker.RatingStruct,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createFreelance(
      _address: PromiseOrValue<string>,
      freelance: Detasker.FreelanceStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createJob(
      _address: PromiseOrValue<string>,
      _job: Detasker.JobStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSkill(
      _address: PromiseOrValue<string>,
      _skill: Detasker.SkillStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSocial(
      _address: PromiseOrValue<string>,
      _social: Detasker.SocialStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createUser(
      _address: PromiseOrValue<string>,
      _profile: Detasker.NewProfileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getConformationDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getJobById(uint256)"(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Detasker.JobStructOutput]>;

    "getJobById(uint256,address)"(
      _jobId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Detasker.JobStructOutput]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getUserCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    jobWithdraw(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerWithdraw(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payForJobByOwner(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recievePaymentForJobByRequester(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setJobDoneByOwner(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setJobDoneByRequester(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    timeForConformation(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        freeLanceId: BigNumber;
        name: string;
        email: string;
        signedUp: BigNumber;
        image: string;
      }
    >;

    vars(overrides?: CallOverrides): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        owner: string;
        jobCount: BigNumber;
        freelanceCount: BigNumber;
        ratingCount: BigNumber;
        tagCount: BigNumber;
        skillCount: BigNumber;
        userCount: BigNumber;
        bnbToken: string;
      }
    >;
  };

  Jobdeposit(
    _token: PromiseOrValue<string>,
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    _address: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveTokenSpend(
    _token: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assignJob(
    _address: PromiseOrValue<string>,
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "balanceOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,address)"(
    _address: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completeJob(
    _address: PromiseOrValue<string>,
    _rating: Detasker.RatingStruct,
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createFreelance(
    _address: PromiseOrValue<string>,
    freelance: Detasker.FreelanceStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createJob(
    _address: PromiseOrValue<string>,
    _job: Detasker.JobStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSkill(
    _address: PromiseOrValue<string>,
    _skill: Detasker.SkillStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSocial(
    _address: PromiseOrValue<string>,
    _social: Detasker.SocialStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createUser(
    _address: PromiseOrValue<string>,
    _profile: Detasker.NewProfileStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getConformationDays(
    _days: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getJobById(uint256)"(
    _jobId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Detasker.JobStructOutput>;

  "getJobById(uint256,address)"(
    _jobId: PromiseOrValue<BigNumberish>,
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Detasker.JobStructOutput>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getUserCount(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  jobWithdraw(
    _token: PromiseOrValue<string>,
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerWithdraw(
    _token: PromiseOrValue<string>,
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payForJobByOwner(
    _jobId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recievePaymentForJobByRequester(
    _jobId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setJobDoneByOwner(
    _address: PromiseOrValue<string>,
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setJobDoneByRequester(
    _address: PromiseOrValue<string>,
    jobId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  timeForConformation(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber, string] & {
      id: BigNumber;
      freeLanceId: BigNumber;
      name: string;
      email: string;
      signedUp: BigNumber;
      image: string;
    }
  >;

  vars(overrides?: CallOverrides): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      owner: string;
      jobCount: BigNumber;
      freelanceCount: BigNumber;
      ratingCount: BigNumber;
      tagCount: BigNumber;
      skillCount: BigNumber;
      userCount: BigNumber;
      bnbToken: string;
    }
  >;

  callStatic: {
    Jobdeposit(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      _address: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveTokenSpend(
      _token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assignJob(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      _address: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeJob(
      _address: PromiseOrValue<string>,
      _rating: Detasker.RatingStruct,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createFreelance(
      _address: PromiseOrValue<string>,
      freelance: Detasker.FreelanceStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createJob(
      _address: PromiseOrValue<string>,
      _job: Detasker.JobStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createSkill(
      _address: PromiseOrValue<string>,
      _skill: Detasker.SkillStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createSocial(
      _address: PromiseOrValue<string>,
      _social: Detasker.SocialStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createUser(
      _address: PromiseOrValue<string>,
      _profile: Detasker.NewProfileStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getConformationDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getJobById(uint256)"(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Detasker.JobStructOutput>;

    "getJobById(uint256,address)"(
      _jobId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Detasker.JobStructOutput>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getUserCount(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    jobWithdraw(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerWithdraw(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payForJobByOwner(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recievePaymentForJobByRequester(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setJobDoneByOwner(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setJobDoneByRequester(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    timeForConformation(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber, string] & {
        id: BigNumber;
        freeLanceId: BigNumber;
        name: string;
        email: string;
        signedUp: BigNumber;
        image: string;
      }
    >;

    vars(overrides?: CallOverrides): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        owner: string;
        jobCount: BigNumber;
        freelanceCount: BigNumber;
        ratingCount: BigNumber;
        tagCount: BigNumber;
        skillCount: BigNumber;
        userCount: BigNumber;
        bnbToken: string;
      }
    >;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "CompletingJob(address,address,uint256,bool)"(
      whoItFor?: null,
      whoCompletedIt?: null,
      forAmount?: null,
      waitForConformation?: null
    ): CompletingJobEventFilter;
    CompletingJob(
      whoItFor?: null,
      whoCompletedIt?: null,
      forAmount?: null,
      waitForConformation?: null
    ): CompletingJobEventFilter;

    "PaidForAJob(uint256,uint256)"(
      amount?: null,
      timestamp?: null
    ): PaidForAJobEventFilter;
    PaidForAJob(amount?: null, timestamp?: null): PaidForAJobEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    Jobdeposit(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      _address: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveTokenSpend(
      _token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assignJob(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      _address: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeJob(
      _address: PromiseOrValue<string>,
      _rating: Detasker.RatingStruct,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createFreelance(
      _address: PromiseOrValue<string>,
      freelance: Detasker.FreelanceStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createJob(
      _address: PromiseOrValue<string>,
      _job: Detasker.JobStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSkill(
      _address: PromiseOrValue<string>,
      _skill: Detasker.SkillStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSocial(
      _address: PromiseOrValue<string>,
      _social: Detasker.SocialStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createUser(
      _address: PromiseOrValue<string>,
      _profile: Detasker.NewProfileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getConformationDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getJobById(uint256)"(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getJobById(uint256,address)"(
      _jobId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getUserCount(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    jobWithdraw(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerWithdraw(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payForJobByOwner(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recievePaymentForJobByRequester(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setJobDoneByOwner(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setJobDoneByRequester(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    timeForConformation(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vars(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Jobdeposit(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      _address: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveTokenSpend(
      _token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assignJob(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,address)"(
      _address: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeJob(
      _address: PromiseOrValue<string>,
      _rating: Detasker.RatingStruct,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createFreelance(
      _address: PromiseOrValue<string>,
      freelance: Detasker.FreelanceStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createJob(
      _address: PromiseOrValue<string>,
      _job: Detasker.JobStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSkill(
      _address: PromiseOrValue<string>,
      _skill: Detasker.SkillStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSocial(
      _address: PromiseOrValue<string>,
      _social: Detasker.SocialStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createUser(
      _address: PromiseOrValue<string>,
      _profile: Detasker.NewProfileStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getConformationDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getJobById(uint256)"(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getJobById(uint256,address)"(
      _jobId: PromiseOrValue<BigNumberish>,
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    jobWithdraw(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerWithdraw(
      _token: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payForJobByOwner(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recievePaymentForJobByRequester(
      _jobId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setJobDoneByOwner(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setJobDoneByRequester(
      _address: PromiseOrValue<string>,
      jobId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeForConformation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vars(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
